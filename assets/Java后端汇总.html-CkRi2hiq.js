import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as e,o as r}from"./app-DWFLoBpU.js";const a={};function p(t,i){return r(),n("div",null,i[0]||(i[0]=[e('<h1 id="java-后端汇总" tabindex="-1"><a class="header-anchor" href="#java-后端汇总"><span>Java 后端汇总</span></a></h1><p>网上搞很多的飞机啊什么的，人都迷糊了，我先写一篇理清楚后端到底要搞什么。 首先总的来说一句，这就是跟前端差不多的各种包管理接入，但是生态更奇怪...</p><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h2><p>Spring 其实是一个轻量应用级框架，而不是专门为web应用设计的。 Spring 在于 DI，Ioc 和 Aop 等思想，这一坨也属于Spring Core。</p><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc"><span>SpringMVC</span></a></h2><p>这个就是专门为Web设计的开发框架，采用视图（不过现在视图层主要都给前端了），控制器（请求控制，权限控制等），模型（业务）</p><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>Mybatis</span></a></h2><p>这个是对于使用数据库专门设计的框架，作为持久层，数据库这一块的开发框架</p><h2 id="spring-ssm" tabindex="-1"><a class="header-anchor" href="#spring-ssm"><span>Spring SSM</span></a></h2><p>SSM = Spring + SpringMVC + Mybatis,也就是说将前三者，MVC提供了请求管控和接入，Spring 强化了整个项目的架构，Mybatis简化和数据库的互动。 如此可以比较方便的进行Web开发</p><h2 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h2><p>就是属于快速集成SSM，更快开发，约定大于配置。</p><h2 id="对比一下前端" tabindex="-1"><a class="header-anchor" href="#对比一下前端"><span>对比一下前端</span></a></h2><p>我是从前端转过来的，对比一下，就仿佛：（不那么贴切的） Spring 相当于Vue/React等应用级框架 SpringMVC 就如 axios，对请求操作进行控制的框架 Mybatis 就如 Redux/VueX,Pinia这类（虽然是全局状态库），或者对IndexDB进行了封装的库 集成上面三者的前端项目相当于SSM Spring Boot相当于一个quick start，否则你创建项目就像： 初始化项目，填写package.json，添加依赖文件，安装依赖，设置各种.config.ts，运行命令配置... 就比较麻烦，quick start 就集成好了，直接从基础配置模板上开始开发</p><h2 id="spring-security" tabindex="-1"><a class="header-anchor" href="#spring-security"><span>Spring Security</span></a></h2><p>各种安全认证啦，前端肯定也搞过类似的</p><h2 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud"><span>Spring Cloud</span></a></h2><p>微服务这一块，普通人很难做这一块的项目的啦，成本太高。 前端也由微前端，但是，说实话，真的很少有项目的体量大到需要微前端来拆分业务的， 微服务的需求比微前端的需求跟高，毕竟把基础服务分布到更广的地方是业务的需求之一。 前端，搓一下项目工具，如果不是有专门的需求，根本碰不到这一类。还是学英语吧😭。</p><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件"><span>中间件</span></a></h2><blockquote><p>中间件就是来降低业务复杂性，解耦的，你看计算机网络模型分那么多层就是为了这个目的，如果什么问题是中间件解决不了的，就再加一层... 后端中间件是指位于操作系统和应用程序之间的软件，它们提供了一种通信机制，使不同的应用程序或系统能够相互交互和协作。以下是一些常见的后端中间件类型及其代表产品：</p></blockquote><p>有哪些中间件</p><ol><li><p><strong>消息队列中间件</strong>：用于在应用程序之间进行异步消息传递。</p><ul><li>Apache Kafka</li><li>RabbitMQ</li><li>ActiveMQ</li><li>RocketMQ</li></ul></li><li><p><strong>数据库中间件</strong>：用于管理和访问数据库。</p><ul><li>MySQL Proxy</li><li>PostgreSQL PgBouncer</li><li>ShardingSphere</li></ul></li><li><p><strong>缓存中间件</strong>：用于加速数据访问，减轻数据库负载。</p><ul><li>Redis</li><li>Memcached</li></ul></li><li><p><strong>Web服务器中间件</strong>：用于处理HTTP请求和响应。</p><ul><li>Nginx</li><li>Apache</li></ul></li><li><p><strong>应用服务器中间件</strong>：用于托管和管理应用程序的执行环境。</p><ul><li>Tomcat</li><li>Jboss</li><li>WebLogic</li><li>WebSphere</li></ul></li><li><p><strong>API网关中间件</strong>：用于管理和控制API的访问和调用。</p><ul><li>Kong</li><li>Apigee</li></ul></li><li><p><strong>配置中心</strong>：用于集中管理配置信息。</p><ul><li>Apollo</li><li>Nacos</li><li>Spring Cloud Config</li></ul></li><li><p><strong>服务框架</strong>：用于构建微服务架构。</p><ul><li>Dubbo</li></ul></li><li><p><strong>监控中间件</strong>：用于监控系统的状态和资源使用情况。</p><ul><li>Nagios</li><li>Zabbix</li></ul></li><li><p><strong>日志中间件</strong>：用于记录和管理日志信息。</p><ul><li>Elasticsearch</li><li>Logstash</li><li>Fluentd</li><li>Graylog</li></ul></li><li><p><strong>事务中间件</strong>：用于处理分布式事务。</p><ul><li>Java事务API（JTA）</li><li>Microsoft分布式事务协调器（MSDTC）</li></ul></li><li><p><strong>安全中间件</strong>：提供安全性功能，如身份验证、授权、加密和访问控制。</p><ul><li>OAuth</li><li>OpenID Connect</li></ul></li><li><p><strong>搜索中间件</strong>：用于构建搜索功能和实现全文搜索。</p><ul><li>Elasticsearch</li><li>Apache Solr</li></ul></li><li><p><strong>虚拟化中间件</strong>：提供虚拟化技术，将物理资源抽象为虚拟资源。</p><ul><li>VMware</li><li>KVM</li></ul></li><li><p><strong>流程中间件</strong>：用于管理和协调业务流程和工作流程。</p><ul><li>Activiti</li><li>Camunda</li></ul></li></ol>',22)]))}const g=l(a,[["render",p],["__file","Java后端汇总.html.vue"]]),c=JSON.parse('{"path":"/posts/backend/Java/Java%E5%90%8E%E7%AB%AF%E6%B1%87%E6%80%BB.html","title":"Java 后端汇总","lang":"zh-CN","frontmatter":{"description":"Java 后端汇总 网上搞很多的飞机啊什么的，人都迷糊了，我先写一篇理清楚后端到底要搞什么。 首先总的来说一句，这就是跟前端差不多的各种包管理接入，但是生态更奇怪... Spring Spring 其实是一个轻量应用级框架，而不是专门为web应用设计的。 Spring 在于 DI，Ioc 和 Aop 等思想，这一坨也属于Spring Core。 Spr...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/backend/Java/Java%E5%90%8E%E7%AB%AF%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:site_name","content":"DayDreamer的个人博客"}],["meta",{"property":"og:title","content":"Java 后端汇总"}],["meta",{"property":"og:description","content":"Java 后端汇总 网上搞很多的飞机啊什么的，人都迷糊了，我先写一篇理清楚后端到底要搞什么。 首先总的来说一句，这就是跟前端差不多的各种包管理接入，但是生态更奇怪... Spring Spring 其实是一个轻量应用级框架，而不是专门为web应用设计的。 Spring 在于 DI，Ioc 和 Aop 等思想，这一坨也属于Spring Core。 Spr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 后端汇总\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DayDreamer\\",\\"url\\":\\"https://floatDreamWithSong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Spring","slug":"spring","link":"#spring","children":[]},{"level":2,"title":"SpringMVC","slug":"springmvc","link":"#springmvc","children":[]},{"level":2,"title":"Mybatis","slug":"mybatis","link":"#mybatis","children":[]},{"level":2,"title":"Spring SSM","slug":"spring-ssm","link":"#spring-ssm","children":[]},{"level":2,"title":"Spring Boot","slug":"spring-boot","link":"#spring-boot","children":[]},{"level":2,"title":"对比一下前端","slug":"对比一下前端","link":"#对比一下前端","children":[]},{"level":2,"title":"Spring Security","slug":"spring-security","link":"#spring-security","children":[]},{"level":2,"title":"Spring Cloud","slug":"spring-cloud","link":"#spring-cloud","children":[]},{"level":2,"title":"中间件","slug":"中间件","link":"#中间件","children":[]}],"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"posts/backend/Java/Java后端汇总.md","excerpt":"\\n<p>网上搞很多的飞机啊什么的，人都迷糊了，我先写一篇理清楚后端到底要搞什么。\\n首先总的来说一句，这就是跟前端差不多的各种包管理接入，但是生态更奇怪...</p>\\n<h2>Spring</h2>\\n<p>Spring 其实是一个轻量应用级框架，而不是专门为web应用设计的。\\nSpring 在于 DI，Ioc 和 Aop 等思想，这一坨也属于Spring Core。</p>\\n<h2>SpringMVC</h2>\\n<p>这个就是专门为Web设计的开发框架，采用视图（不过现在视图层主要都给前端了），控制器（请求控制，权限控制等），模型（业务）</p>\\n<h2>Mybatis</h2>\\n<p>这个是对于使用数据库专门设计的框架，作为持久层，数据库这一块的开发框架</p>","autoDesc":true}');export{g as comp,c as data};
