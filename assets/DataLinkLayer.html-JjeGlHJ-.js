import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as l,o as n}from"./app-BhqNC9WS.js";const t="/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Parity.png",e="/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%BC%82%E5%B8%B8.png",p="/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BD%AF%E4%BB%B6%E8%AE%A1%E6%97%B6%E5%99%A8.png",r="/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%9D%9E%E9%A1%BA%E5%BA%8F%E6%8E%A5%E5%8F%97%E5%BC%82%E5%B8%B8.png",o={};function h(c,s){return n(),i("div",null,s[0]||(s[0]=[l('<h1 id="data-link-layer-数据链路层" tabindex="-1"><a class="header-anchor" href="#data-link-layer-数据链路层"><span>Data Link Layer (数据链路层)</span></a></h1><h2 id="function-功能" tabindex="-1"><a class="header-anchor" href="#function-功能"><span>Function( 功能)</span></a></h2><ul><li><strong>服务接口</strong> 向网络层提供一个服务接口 三种服务： <ul><li>无确认的无连接服务 <ul><li>错误率低</li><li>实时性高</li><li>Most LANs</li></ul></li><li>有确认的无连接服务 <ul><li>不可靠，但是每帧都会确认</li><li>例如无线局域网，802.11</li></ul></li><li>有确认的面向连接服务 <ul><li>WAN, P2P</li><li>建立连接、传输帧、释放</li><li>确保每一帧刚好传输一次、帧有序</li></ul></li></ul></li><li><strong>成帧</strong> 将网络层传下来的数据封装成帧 <ul><li>帧头：帧同步、帧长度、帧校验序列</li><li>有效载荷：数据</li><li>帧尾：帧校验序列</li></ul><blockquote><p>数据包和帧的关系：数据包是网络层传下来的，帧是数据链路层传下去的</p></blockquote></li><li><strong>传输错误处理</strong> 比如检错、纠错</li><li><strong>调节数据流量</strong> 比如流量控制，确保发送方不会淹没接收方</li></ul><h2 id="framing-成帧" tabindex="-1"><a class="header-anchor" href="#framing-成帧"><span>Framing (成帧)</span></a></h2><ul><li><strong>字节计数法</strong>：帧头中包含一个计数字段，表示帧中字节数</li><li><strong>标志字节法</strong>：帧头和帧尾包含特殊的字节，用于标识帧的开始和结束</li><li><strong>标志比特法</strong>：帧头和帧尾包含特殊的比特模式，用于标识帧的开始和结束</li><li><strong>物理层违例编码法</strong>：利用物理层编码违例外，标识帧的开始和结束</li></ul><blockquote><p>备注：此处字节=字符</p></blockquote><h3 id="字符计数" tabindex="-1"><a class="header-anchor" href="#字符计数"><span>字符计数</span></a></h3><p>每一帧开头都有一个字符（character），表示这一帧总共有多少字符。</p><blockquote><p><strong>问题</strong></p></blockquote><p>如果发生传输错误，接收方就会失去同步，找不到帧开始的位置，发送方也不知道从哪里开始重传</p><h3 id="标志字节法" tabindex="-1"><a class="header-anchor" href="#标志字节法"><span>标志字节法</span></a></h3><p>每一帧开头和结尾都有一个特殊的字符，称为标志字节（flag byte），表示帧的开始和结束。 如果接收方失去同步，只需要搜索两个标志字符就能找到当前帧的的结束位置、下一帧的开始位置。</p><blockquote><p><strong>问题</strong></p></blockquote><p>如果数据中恰好出现标志字节，就会产生冲突，称为<strong>冲突逃逸字符</strong>（escape character）</p><blockquote><p>解决方案：<strong>字节填充（byte stuffing）</strong></p></blockquote><ul><li>如果数据中恰好出现标志字节，就在它前面加上一个特殊的字符，称为转义字符（escape character）</li><li>接收方的数据链路层在传输给网络层前需要处理转义字符</li><li>如果数据中恰好出现转义字符，就在它前面再加上一个转义字符</li><li>填充方案举例：PPP（Point-to-Point Protocol）</li></ul><blockquote><p>缺点：8比特的字节来区分边界，效率低</p></blockquote><h3 id="标志比特法" tabindex="-1"><a class="header-anchor" href="#标志比特法"><span>标志比特法</span></a></h3><p>每一帧开头和结尾都有一个特殊的比特模式，称为标志比特（flag bit），表示帧的开始和结束。</p><blockquote><p><strong>比特填充</strong></p></blockquote><ul><li>以六个连续的1，即111111作为定界符</li><li>如果数据中恰好出现六个连续的1，当遇到5个连续的1时，在后面插入一个比特0</li><li>接收方的数据链路层在传输给网络层前需要处理比特填充，遇到5个连续的1时，删除后面插入的比特0</li></ul><blockquote><p><strong>相比标志字符法</strong></p><ul><li>传输效率高</li><li>划分级别在比特级别，而不是字符级别</li><li>帧可以包含任意大小单元</li></ul></blockquote><p>现实中的运用例子：USB</p><h3 id="物理层违例编码法" tabindex="-1"><a class="header-anchor" href="#物理层违例编码法"><span>物理层违例编码法</span></a></h3><p>核心思想：选择的定界符不会在数据中出现</p><p>方案：</p><ol><li>4B/5B</li><li>前导码</li></ol><ul><li>存在很长的前导码，可以用作定界符</li><li><strong>例子</strong>： 以太网，802.11</li></ul><ol start="3"><li>曼彻斯特编码</li></ol><ul><li>周期性的跳变，可以用作定界符</li></ul><h2 id="error-control-错误控制" tabindex="-1"><a class="header-anchor" href="#error-control-错误控制"><span>Error Control (错误控制)</span></a></h2><blockquote><p><strong>错误</strong></p><ul><li>差错</li><li>丢失</li><li>乱序</li><li>重复</li></ul></blockquote><blockquote><p><strong>解决方案</strong></p><ul><li><a href="#error-detection-and-correction-%E6%A3%80%E9%94%99%E5%92%8C%E7%BA%A0%E9%94%99">eror detection (检错)</a></li><li>Feedback: 反馈 <ul><li>Positive Acknowledgment (PA)</li><li>Negative Acknowledgment (NA)</li></ul></li><li>Timer：计时器</li><li>Sequence Number：序列号</li></ul></blockquote><h2 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制"><span>流量控制</span></a></h2><h3 id="feedback-based-flow-control-基于反馈的流量控制" tabindex="-1"><a class="header-anchor" href="#feedback-based-flow-control-基于反馈的流量控制"><span>feedback-based flow control(基于反馈的流量控制)</span></a></h3><h3 id="rate-based-flow-control-基于速率的流量控制" tabindex="-1"><a class="header-anchor" href="#rate-based-flow-control-基于速率的流量控制"><span>rate-based flow control(基于速率的流量控制)</span></a></h3><h2 id="error-detection-and-correction-检错和纠错" tabindex="-1"><a class="header-anchor" href="#error-detection-and-correction-检错和纠错"><span>Error Detection and Correction (检错和纠错)</span></a></h2><h3 id="策略" tabindex="-1"><a class="header-anchor" href="#策略"><span>策略</span></a></h3><ol><li>纠错码，使用纠错码的技术叫FEC（Forward Error Correction）</li></ol><ul><li>在发送的数据中包含信息，让接受发推断发生了什么错误 (what)</li><li>适用于容易出错的、有噪声的信道，例如无线链路</li></ul><ol start="2"><li>检错码</li></ol><ul><li>在发送的数据中包含信息，让接受方判断数据是否出错（is）</li><li>适用于不容易出错的，例如光纤</li></ul><h3 id="两种错误模型" tabindex="-1"><a class="header-anchor" href="#两种错误模型"><span>两种错误模型</span></a></h3><ol><li>单比特错误:极端热噪声淹没了信号</li><li>突发性错误（源自物理过程）</li></ol><p><strong>对比</strong>：</p><ul><li>多个单比特，如果错误是独立的，可能覆盖覆盖范围很广，导致多个数据块出错</li><li>突发错误一般集中在一个数据块，但是这比单个比特更难纠正</li></ul><blockquote><p><strong>补充：erase channel(擦除信道):</strong> 接受的模拟信号远离了0，1的预期值，相比于比特翻转，这更容易发现那个bit出错了。</p></blockquote><h3 id="纠错码" tabindex="-1"><a class="header-anchor" href="#纠错码"><span>纠错码</span></a></h3><p>将冗余信息加入数据：m个数据位，r个冗余位，总共有n=m+r个位 码字：数据位和冗余位组成的序列 码率：数据位和码字的比率，m/n</p><ul><li><strong>海明距离</strong>：两个码字之间，对应位置不同字符的个数 <ul><li>例如：0000000000, 0000011111, 1111100000, and 1111111111</li><li>Hamming distance is 5，因为任意字串之间转换都需要改变5个字符</li></ul></li><li><strong>最小海明距离</strong>：两个码字之间，对应位置不同字符的最小个数</li><li>为了检测d个错误，需要d+1的编码方案</li><li>为了纠正d个错误，需要2d+1的编码方案</li></ul><blockquote><p><strong>例子</strong> 0000000000, 0000011111, 1111100000, 1111111111, 距离为5，那么它可以纠正最多2个错误 比如如果是发送了0000011111，接收方收到了0000000111，发生了两个错误，那么接受发还是可以选择最接近的0000011111，从而纠正错误 比如如果是发送了0000000000，接收方收到了0000000111，那么它就不能正确的纠错了</p></blockquote><p>校验位数量如何最少：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><msup><mn>2</mn><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">m+r+1 &lt;= 2^r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="hamming-code-海明码" tabindex="-1"><a class="header-anchor" href="#hamming-code-海明码"><span>Hamming Code（海明码）</span></a></h4><p>海明码能发现<code>多位错误</code>,但只能纠正<code>一位错误</code>，若用在纠正传输中出现突发性差错时可以采用下述方法:将连续P个码字排成一个矩阵，每行一个码字。如果发生突发长度≤P的突发错误，那么在P个码字中最多每个码字有一位有差错，正好由海明码能纠正。</p><blockquote><ul><li><strong>确定编码数量</strong>： <ul><li>由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>r</mi></msup><mo>&gt;</mo><mo>=</mo><mi>m</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^r &gt;= m+r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7035em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，可以确定需要r个校验位</li></ul></li><li><strong>确定每个校验位的位置</strong>： <ul><li>从1开始，2的幂次方，即1, 2, 4, 8, 16, 32, 64, 128, ...</li></ul></li><li>拼接校验位和数据位，得到n+r位的码字</li><li><strong>校验位的值</strong>： <ul><li>对于第i（i=1,2,3...）个校验位，从当前校验位所在位置开始（校验位初始化值为0），若用一个tmp来表示校验位的值，tmp = 0，将tmp^=码字位，并且每隔 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mtext>（</mtext></msup><mi>i</mi><mo>−</mo><mn>1</mn><mtext>）</mtext></mrow><annotation encoding="application/x-tex">2^（i-1）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9247em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">（</span></span></span></span></span></span></span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord cjk_fallback">）</span></span></span></span> 个位置再次异或，得到校验位的值。</li><li>（校验位的值的意义就是判断这些统计的部分里的1的个数是否为奇数（tmp=1）或偶数（tmp=0））</li></ul></li></ul></blockquote><p>接收方收到码字后，用同样的方法计算新的校验位的值，并将重新计算出来的校验位依次，从二进制低位到高位排列</p><blockquote><ul><li>如果二进制数最终代表0，那么就没有错误</li><li>否则，如果出错了一位，那么二进制所代表的数就是码字出错的位置 <ul><li>纠正：将计算出来的出错位置取反，得到正确的码字</li></ul></li></ul></blockquote><h3 id="检错码" tabindex="-1"><a class="header-anchor" href="#检错码"><span>检错码</span></a></h3><h4 id="parity-奇偶校验" tabindex="-1"><a class="header-anchor" href="#parity-奇偶校验"><span>Parity(奇偶校验)</span></a></h4><ul><li><strong>奇校验</strong>：校验位使得整个数据包中1的个数是奇数</li><li><strong>偶校验</strong>：校验位使得整个数据包中1的个数是偶数</li></ul><figure><img src="'+t+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="checksums-校验和" tabindex="-1"><a class="header-anchor" href="#checksums-校验和"><span>Checksums(校验和)</span></a></h4><p>检验部位：IP头部，数据正文不参与校验计算</p><ul><li><strong>计算</strong>：将数据包中的所有字相加，然后取反码，得<code>检验和</code></li><li><strong>校验</strong>：将检验和与数据包中的所有字相加，然后取反码，如果结果为0，那么数据包没有错误</li></ul><h4 id="crc-cyclic-redundancy-check" tabindex="-1"><a class="header-anchor" href="#crc-cyclic-redundancy-check"><span>CRC (Cyclic Redundancy Check)</span></a></h4><ul><li><p><strong>计算</strong>: 将数据包中的所有字与生成多项式进行模2除法，得到余数，余数就是检验位</p></li><li><p><strong>商定</strong>: 生成多项式是双方商定好的，且多项式的最高位和最低位系数都是1</p></li><li><p><strong>校验</strong>: 将数据包中的所有字与生成多项式进行模2除法，得到余数，如果余数为0，那么数据包没有错误</p></li><li><p><strong>生成多项式</strong>：生成多项式是二进制数，每一位表示多项式的一项</p></li></ul><h2 id="基本数据链路层协议" tabindex="-1"><a class="header-anchor" href="#基本数据链路层协议"><span>基本数据链路层协议</span></a></h2><blockquote><p>NIC: Network Interface Card(网络接口卡)</p></blockquote><blockquote><p>数据包和帧：网络层从传输层获得报文，加上网络层头以创建数据包，传递给链路层，链路层将数据包装在帧的info中</p></blockquote><h3 id="单工协议" tabindex="-1"><a class="header-anchor" href="#单工协议"><span>单工协议</span></a></h3><h4 id="乌托邦式的单工协议" tabindex="-1"><a class="header-anchor" href="#乌托邦式的单工协议"><span>乌托邦式的单工协议</span></a></h4><p>完全没有异常发生。</p><ul><li><strong>发送方</strong><ul><li>从网络层获取数据包</li><li>将数据包放入帧中</li><li>向物理层发送帧</li></ul></li><li><strong>接收方</strong><ul><li>等待事件</li><li>从物理层接收帧</li><li>将帧中的数据包交给网络层</li></ul></li></ul><h4 id="无错信道的单工协议" tabindex="-1"><a class="header-anchor" href="#无错信道的单工协议"><span>无错信道的单工协议</span></a></h4><blockquote><p>考虑了发送方淹没接收方，进行了流量控制。 由于需要接收方反馈一个哑帧（确认），需要一个半双工信道 停-等式协议</p></blockquote><ul><li><strong>发送方</strong><ul><li>从网络层获取数据包</li><li>将数据包放入帧中</li><li>向物理层发送帧</li><li>等待事件（等待接收方发送回来的哑帧）</li></ul></li><li><strong>接收方</strong><ul><li>等待事件</li><li>从物理层接收帧</li><li>将帧中的数据包交给网络层</li><li>发送确认帧</li></ul></li></ul><h4 id="有错信道的单工停-等式协议" tabindex="-1"><a class="header-anchor" href="#有错信道的单工停-等式协议"><span>有错信道的单工停-等式协议</span></a></h4><blockquote><p>考虑帧传输的丢失、帧传输的重复 计时器（发送发判断超时）、序列号（接收方区分重复） ARQ、PAR</p></blockquote><ul><li><strong>计时器</strong> 发送方在发送帧后启动计时器，如果计时器超时，那么就重新发送当前帧(如果仅仅是因为接收方的确认帧丢失了导致的超时，就有可能发生重复帧的情况)</li><li><strong>序列号</strong> 由于我们只关心当前帧是否达到，而决定我们下一帧是发送当前帧还是后一帧，所以用一位0/1足够区分了 <ul><li>接受方收到重复帧和受损帧，只需要重传最后一次正确接受到的帧的序号就可以让发送新帧或者重新发送受损帧</li></ul></li></ul><h3 id="双向通信的协议" tabindex="-1"><a class="header-anchor" href="#双向通信的协议"><span>双向通信的协议</span></a></h3><blockquote><p>实际情况需要双方计算机同时互相传输一些数据</p></blockquote><ul><li><strong>全双工信道</strong><ul><li>一个用来发送数据，一个用来发送确认。</li><li>缺点是浪费逆向信道的带宽。</li></ul></li><li><strong>piggybacking(捎带确认)</strong><ul><li>一个机器向另一个机器的数据帧和确认帧可以一起发送。</li><li>优点：省带宽,并且减少了发送的帧的数量（节省了帧头）</li><li>缺点：发送一个确认帧可能还需要等待本机的网络层发数据包下来</li><li>缺点改进：当一段时间内确实没有数据包发下来，就发送一个单独的确认帧</li></ul></li></ul><h4 id="滑动窗口协议" tabindex="-1"><a class="header-anchor" href="#滑动窗口协议"><span>滑动窗口协议</span></a></h4><p><strong>基本工作模式</strong></p><ul><li><strong>发送方</strong><ul><li>维持一组<code>序列号</code>，任何时候发送的帧的数量都不能超过MAX_SEQ</li><li>窗口内代表从网络层获取后还处于没被确认接受的帧</li><li>如果窗口大小达到上界，暂时停止从网络层接受数据包</li><li>**累计确认：**如果第n帧被ACK了，那么表示n之前的帧都已经被ACK了</li></ul></li><li><strong>接收方</strong><ul><li>窗口内代表等待接受的帧，任何落在窗口内的帧都在链路层缓存</li><li>如果窗口下界刚好有已经接受了的帧，那么就把数据包解析给网络层，窗口下界+1</li></ul></li><li><strong>关键词</strong><ul><li><code>sending window</code> 发送窗口</li><li><code>receiving window</code> 接收窗口</li><li>序号空间</li><li>$ MAX_SEQ = 2^n - 1$</li></ul></li></ul><h5 id="一位滑动窗口协议" tabindex="-1"><a class="header-anchor" href="#一位滑动窗口协议"><span><strong>一位滑动窗口协议</strong></span></a></h5><blockquote><p>其实就是一个窗口大小为 1 的情况的示例，类似1位停-等式协议</p></blockquote><p>**伪代码：**由于是双向通信，两方的代码是一样的</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  frame, buffer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    wait_event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> frame_arrival){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 截断式分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      get_frame_from_physical_layer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">frame);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">frame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">seq</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expect_seq){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 获取正确</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        to_network_layer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">frame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        incre_expect_seq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">frame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ack</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> next_frame_seq){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 发送成功，拉取新数据包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        clear_timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        get_frame_from_network_layer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buffer);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        incre_next_frame_seq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    packet </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make_frame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /*发送的帧序号*/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> next_frame_seq,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /*确认*/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expect_seq);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    send_to_physical_layer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(packet);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    start_timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题：</strong> 双方可能如图右所示，帧的接受交错，导致帧重复发送。 例如A发送了A0后，由于接收到了B的初始状态（0，1），导致A认为B接受失败了，又重新发送了A0，这样严重浪费了带宽。</p><figure><img src="`+e+'" alt="一位滑动窗口异常" tabindex="0" loading="lazy"><figcaption>一位滑动窗口异常</figcaption></figure><h5 id="回退n协议" tabindex="-1"><a class="header-anchor" href="#回退n协议"><span><strong>回退N协议</strong></span></a></h5><blockquote><p><strong>场景：</strong> 如果双方通信延迟较高，那么他们对带宽的实际利用很低（基本都在等待） 如果发送下一帧的前提是确保接收方确认接受了，那么是无法避免这样的结果的</p></blockquote><p>我们发送方在阻塞之前可以发送多达W帧，并且有足够的窗口大小，并且当确认帧返回时我们的窗口应该没有被填满，这种情况下就可以尽量地保证发送发持续发送帧</p><p>怎么找到w的值，也就是我们这个通信通道最多可以有多少帧在信道中同时传输，<code>帧数/(窗口容量) w</code>依赖于<code>带宽 B</code>和<code>单向传输时间 D</code></p><p>考虑回路，以及接收方正在处理一个帧，总容量:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo>=</mo><mn>2</mn><mi>B</mi><mi>D</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex"> w=2BD+1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>当W比2BD+1小的时候，更容易被阻塞，所以</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>链路利用率</mtext><mo>&lt;</mo><mo>=</mo><mfrac><mi>w</mi><mrow><mn>2</mn><mi>B</mi><mi>D</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex"> 链路利用率 &lt;= \\frac{w}{2BD+1} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">链路利用率</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8769em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>显然，w必须要足够大，这还是不考虑帧的接受处理、ACK帧长度的情况</p><p>**管道化（pipelining）**保持多个帧在信道中传输</p><ul><li>**主要问题：**解决管道传输错误的情况</li><li>**策略权衡值：**链路层的缓存大小、带宽利用率</li><li><strong>解决方法：</strong><ul><li><strong>窗口大小为1（回退n）</strong> 如果发生一个错误帧，（由于接收方只有一个缓冲区，没法多收，而发送方必须维持所有的未确认帧）接收方就忽略后续到达的所有其他帧，当发送方超时后，从错误帧开始重新传输。不适合信道错误率高的情况</li><li><strong>窗口大小较大（选择重传）</strong> 如果发生一个错误帧，接收方可以用窗口缓存后续正确的帧，并向接收方发送一个NAK（Negative Acknowledgement），发送方收到NAK后，重新传输错误帧。 接收方可以继续从上一次正确接受的帧开始发送ACK，这样就避免了重复传输中间的正确帧的情况。</li></ul></li></ul><blockquote><p><strong>如何用软件模拟计时器超时</strong><img src="'+p+'" alt="基于链表的软件模拟" loading="lazy"></p></blockquote><h5 id="选择重传协议" tabindex="-1"><a class="header-anchor" href="#选择重传协议"><span><strong>选择重传协议</strong></span></a></h5><p>刚才管道化已经简单介绍了，这里再补充一下</p><blockquote><p>双方各自维护窗口，发送方从0开始，可以增大到一个预定的最大值 接收方窗口大小固定，每个缓冲区都有一个<code>标志位（arrived）</code>，表示该帧是否已经接受 接收方只处理落入当前窗口内的帧</p></blockquote><p>我们可以看到，选择重传是一种非顺序接受的方式。</p><p>对于一般的非顺序接受，但是如果发生某些传输异常，这个协议就是不正确的，比如：</p><blockquote><p><img src="'+r+'" alt="非顺序接受异常" loading="lazy"> 初始为（a）图 当接收方正确接受了7个帧后，发送ACK 7回去时，由于一些异常导致ACK没有传到发送方，此时发送方超时，但是接收方已经生成了新的窗口（窗口是循环使用的） 发送方重新发送0帧，但是接收方的0处已经是新窗口了，因此它占据了原本新窗口的数据，导致这给网络层的将是错误的数据包。协议失败 （说实话，其实如果接受到新的正确0时，对这个位置的进行覆写就行了，但是这样就失去了标志位（arrived）的意义，并且还消耗一点点性能，所以协议没有选择这么做） **原因：**新窗口与老窗口重叠 **解决：**窗口大小不超过序号空间的 $ 1/2 $</p></blockquote><p><strong>计时器</strong></p><p>需要的计时器数量和缓冲区数量一样多</p><p><strong>接收方的辅助计时器</strong></p><blockquote><p>如果A发送给B的流量大，但是反向流量小，由于采用了捎带确认，这样A-&gt;B很容易阻塞</p></blockquote><p>我们在接收方需要一个辅助计时器，对应一个缓冲区，如果在短时间内没有需要发送的反向流量，那么就发送一个单独的确认帧，这样可以避免A轻易地陷入阻塞</p><p>当然，计时器应该尽可能更短，因为更快的确认帧达到，可以避免发送方重传</p><p><strong>NAK</strong></p><p>由接受方管理，用于请求发送方重传指定的帧，发送方要记下某帧是否已经发过NAK了，避免多次请求同一个帧</p>',117)]))}const d=a(o,[["render",h],["__file","DataLinkLayer.html.vue"]]),k=JSON.parse('{"path":"/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/DataLinkLayer.html","title":"Data Link Layer (数据链路层)","lang":"zh-CN","frontmatter":{"description":"Data Link Layer (数据链路层) Function( 功能) 服务接口 向网络层提供一个服务接口 三种服务： 无确认的无连接服务 错误率低 实时性高 Most LANs 有确认的无连接服务 不可靠，但是每帧都会确认 例如无线局域网，802.11 有确认的面向连接服务 WAN, P2P 建立连接、传输帧、释放 确保每一帧刚好传输一次、帧有序...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/DataLinkLayer.html"}],["meta",{"property":"og:site_name","content":"DayDreamer的个人博客"}],["meta",{"property":"og:title","content":"Data Link Layer (数据链路层)"}],["meta",{"property":"og:description","content":"Data Link Layer (数据链路层) Function( 功能) 服务接口 向网络层提供一个服务接口 三种服务： 无确认的无连接服务 错误率低 实时性高 Most LANs 有确认的无连接服务 不可靠，但是每帧都会确认 例如无线局域网，802.11 有确认的面向连接服务 WAN, P2P 建立连接、传输帧、释放 确保每一帧刚好传输一次、帧有序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/专业课/计算机网络/Parity.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Data Link Layer (数据链路层)\\",\\"image\\":[\\"https://mister-hope.github.io/专业课/计算机网络/Parity.png\\",\\"https://mister-hope.github.io/专业课/计算机网络/1滑动窗口异常.png\\",\\"https://mister-hope.github.io/专业课/计算机网络/软件计时器.png \\",\\"https://mister-hope.github.io/专业课/计算机网络/非顺序接受异常.png \\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DayDreamer\\",\\"url\\":\\"https://floatDreamWithSong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Function( 功能)","slug":"function-功能","link":"#function-功能","children":[]},{"level":2,"title":"Framing (成帧)","slug":"framing-成帧","link":"#framing-成帧","children":[{"level":3,"title":"字符计数","slug":"字符计数","link":"#字符计数","children":[]},{"level":3,"title":"标志字节法","slug":"标志字节法","link":"#标志字节法","children":[]},{"level":3,"title":"标志比特法","slug":"标志比特法","link":"#标志比特法","children":[]},{"level":3,"title":"物理层违例编码法","slug":"物理层违例编码法","link":"#物理层违例编码法","children":[]}]},{"level":2,"title":"Error Control (错误控制)","slug":"error-control-错误控制","link":"#error-control-错误控制","children":[]},{"level":2,"title":"流量控制","slug":"流量控制","link":"#流量控制","children":[{"level":3,"title":"feedback-based flow control(基于反馈的流量控制)","slug":"feedback-based-flow-control-基于反馈的流量控制","link":"#feedback-based-flow-control-基于反馈的流量控制","children":[]},{"level":3,"title":"rate-based flow control(基于速率的流量控制)","slug":"rate-based-flow-control-基于速率的流量控制","link":"#rate-based-flow-control-基于速率的流量控制","children":[]}]},{"level":2,"title":"Error Detection and Correction (检错和纠错)","slug":"error-detection-and-correction-检错和纠错","link":"#error-detection-and-correction-检错和纠错","children":[{"level":3,"title":"策略","slug":"策略","link":"#策略","children":[]},{"level":3,"title":"两种错误模型","slug":"两种错误模型","link":"#两种错误模型","children":[]},{"level":3,"title":"纠错码","slug":"纠错码","link":"#纠错码","children":[]},{"level":3,"title":"检错码","slug":"检错码","link":"#检错码","children":[]}]},{"level":2,"title":"基本数据链路层协议","slug":"基本数据链路层协议","link":"#基本数据链路层协议","children":[{"level":3,"title":"单工协议","slug":"单工协议","link":"#单工协议","children":[]},{"level":3,"title":"双向通信的协议","slug":"双向通信的协议","link":"#双向通信的协议","children":[]}]}],"readingTime":{"minutes":14.81,"words":4444},"filePathRelative":"posts/专业课/计算机网络/DataLinkLayer.md","excerpt":"\\n<h2>Function( 功能)</h2>\\n<ul>\\n<li><strong>服务接口</strong> 向网络层提供一个服务接口\\n三种服务：\\n<ul>\\n<li>无确认的无连接服务\\n<ul>\\n<li>错误率低</li>\\n<li>实时性高</li>\\n<li>Most LANs</li>\\n</ul>\\n</li>\\n<li>有确认的无连接服务\\n<ul>\\n<li>不可靠，但是每帧都会确认</li>\\n<li>例如无线局域网，802.11</li>\\n</ul>\\n</li>\\n<li>有确认的面向连接服务\\n<ul>\\n<li>WAN, P2P</li>\\n<li>建立连接、传输帧、释放</li>\\n<li>确保每一帧刚好传输一次、帧有序</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><strong>成帧</strong> 将网络层传下来的数据封装成帧\\n<ul>\\n<li>帧头：帧同步、帧长度、帧校验序列</li>\\n<li>有效载荷：数据</li>\\n<li>帧尾：帧校验序列</li>\\n</ul>\\n<blockquote>\\n<p>数据包和帧的关系：数据包是网络层传下来的，帧是数据链路层传下去的</p>\\n</blockquote>\\n</li>\\n<li><strong>传输错误处理</strong> 比如检错、纠错</li>\\n<li><strong>调节数据流量</strong> 比如流量控制，确保发送方不会淹没接收方</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
