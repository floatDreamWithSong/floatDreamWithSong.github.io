import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as t,o as n}from"./app-sd-SOqzp.js";const a={};function s(r,e){return n(),l("div",null,e[0]||(e[0]=[t('<h1 id="cpu-scheduling" tabindex="-1"><a class="header-anchor" href="#cpu-scheduling"><span>CPU scheduling</span></a></h1><h2 id="原则" tabindex="-1"><a class="header-anchor" href="#原则"><span>原则</span></a></h2><h2 id="调度算法" tabindex="-1"><a class="header-anchor" href="#调度算法"><span>调度算法</span></a></h2><h3 id="先来先服务-fcfs" tabindex="-1"><a class="header-anchor" href="#先来先服务-fcfs"><span>先来先服务（FCFS）</span></a></h3><h3 id="最短作业优先-sjf" tabindex="-1"><a class="header-anchor" href="#最短作业优先-sjf"><span>最短作业优先（SJF）</span></a></h3><h3 id="最短剩余时间优先-srtf" tabindex="-1"><a class="header-anchor" href="#最短剩余时间优先-srtf"><span>最短剩余时间优先（SRTF）</span></a></h3><h3 id="轮转-rr-round-robin" tabindex="-1"><a class="header-anchor" href="#轮转-rr-round-robin"><span>轮转 (RR: Round Robin)</span></a></h3><p>轮转时间间隔控制在合适范围，太小导致切换效率低，太高导致接近于FCFS。</p><blockquote><p>turnaround time (轮转时间) = burst time （执行时间） + waiting time （等待时间）</p></blockquote><h2 id="优先级调度-priority-scheduling" tabindex="-1"><a class="header-anchor" href="#优先级调度-priority-scheduling"><span>优先级调度（Priority Scheduling）</span></a></h2><p>SJF 是以作业时间作为优先级的priority scheduling算法。</p><blockquote><p>问题： 饥饿：低优先级的作业长期得不到调度，导致长时间等待，称为饥饿。 解决： 老化：随着时间增加，还在等待的进程优先级逐渐升高</p></blockquote><h2 id="多级队列-multilevel-queue" tabindex="-1"><a class="header-anchor" href="#多级队列-multilevel-queue"><span>多级队列（Multilevel Queue）</span></a></h2><h2 id="多级反馈队列-multilevel-feedback-queue" tabindex="-1"><a class="header-anchor" href="#多级反馈队列-multilevel-feedback-queue"><span>多级反馈队列（Multilevel Feedback Queue）</span></a></h2><p>parameters:</p><ul><li>队列数目</li><li>每个队列的调度算法</li><li>每个队列的优先级升降算法（upgrade/dometo）</li><li>进程进入队列的条件</li></ul><h2 id="竞争范围-contetion-scope" tabindex="-1"><a class="header-anchor" href="#竞争范围-contetion-scope"><span>竞争范围 （contetion scope）</span></a></h2><blockquote><p>SCS: system conteion scope PCS: process conteion scope</p></blockquote><h2 id="多核处理器-mps-multi-processor-scheduling" tabindex="-1"><a class="header-anchor" href="#多核处理器-mps-multi-processor-scheduling"><span>多核处理器 MPS (Multi-Processor Scheduling)</span></a></h2><blockquote><p>内存停顿 解决：如果一个线程因为内存停顿等待，则切换到另一个线程，直到内存可用。</p></blockquote><p>有以下结构特征：</p><ul><li>mutilcore cpu</li><li>mutilthread cores</li><li>NUMA (Non-Uniform Memory Access)</li><li>Heterogeneous system(异构系统)</li></ul><h3 id="smp-symmetric-multi-processing" tabindex="-1"><a class="header-anchor" href="#smp-symmetric-multi-processing"><span>SMP (Symmetric Multi-Processing)</span></a></h3><p>SMP每个处理器都有自己的调度 所有的线程有可能都在同一个就绪队列 处理器有自己的线程队列</p><h3 id="mms-mutilthread-multi-core-system" tabindex="-1"><a class="header-anchor" href="#mms-mutilthread-multi-core-system"><span>MMS (mutilthread multi-core system)</span></a></h3><h3 id="lb-load-balancing-负载均衡" tabindex="-1"><a class="header-anchor" href="#lb-load-balancing-负载均衡"><span>LB (Load Balancing) 负载均衡</span></a></h3><h3 id="亲和性-affinity" tabindex="-1"><a class="header-anchor" href="#亲和性-affinity"><span>亲和性 (affinity)</span></a></h3><h2 id="real-time-scheduling" tabindex="-1"><a class="header-anchor" href="#real-time-scheduling"><span>Real-Time Scheduling</span></a></h2><p>soft real-time scheduling</p>',29)]))}const h=i(a,[["render",s],["__file","cpu调度.html.vue"]]),u=JSON.parse('{"path":"/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/OS/cpu%E8%B0%83%E5%BA%A6.html","title":"CPU scheduling","lang":"zh-CN","frontmatter":{"description":"CPU scheduling 原则 调度算法 先来先服务（FCFS） 最短作业优先（SJF） 最短剩余时间优先（SRTF） 轮转 (RR: Round Robin) 轮转时间间隔控制在合适范围，太小导致切换效率低，太高导致接近于FCFS。 turnaround time (轮转时间) = burst time （执行时间） + waiting time...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/OS/cpu%E8%B0%83%E5%BA%A6.html"}],["meta",{"property":"og:site_name","content":"DayDreamer的个人博客"}],["meta",{"property":"og:title","content":"CPU scheduling"}],["meta",{"property":"og:description","content":"CPU scheduling 原则 调度算法 先来先服务（FCFS） 最短作业优先（SJF） 最短剩余时间优先（SRTF） 轮转 (RR: Round Robin) 轮转时间间隔控制在合适范围，太小导致切换效率低，太高导致接近于FCFS。 turnaround time (轮转时间) = burst time （执行时间） + waiting time..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CPU scheduling\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DayDreamer\\",\\"url\\":\\"https://floatDreamWithSong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"原则","slug":"原则","link":"#原则","children":[]},{"level":2,"title":"调度算法","slug":"调度算法","link":"#调度算法","children":[{"level":3,"title":"先来先服务（FCFS）","slug":"先来先服务-fcfs","link":"#先来先服务-fcfs","children":[]},{"level":3,"title":"最短作业优先（SJF）","slug":"最短作业优先-sjf","link":"#最短作业优先-sjf","children":[]},{"level":3,"title":"最短剩余时间优先（SRTF）","slug":"最短剩余时间优先-srtf","link":"#最短剩余时间优先-srtf","children":[]},{"level":3,"title":"轮转 (RR: Round Robin)","slug":"轮转-rr-round-robin","link":"#轮转-rr-round-robin","children":[]}]},{"level":2,"title":"优先级调度（Priority Scheduling）","slug":"优先级调度-priority-scheduling","link":"#优先级调度-priority-scheduling","children":[]},{"level":2,"title":"多级队列（Multilevel Queue）","slug":"多级队列-multilevel-queue","link":"#多级队列-multilevel-queue","children":[]},{"level":2,"title":"多级反馈队列（Multilevel Feedback Queue）","slug":"多级反馈队列-multilevel-feedback-queue","link":"#多级反馈队列-multilevel-feedback-queue","children":[]},{"level":2,"title":"竞争范围 （contetion scope）","slug":"竞争范围-contetion-scope","link":"#竞争范围-contetion-scope","children":[]},{"level":2,"title":"多核处理器 MPS (Multi-Processor Scheduling)","slug":"多核处理器-mps-multi-processor-scheduling","link":"#多核处理器-mps-multi-processor-scheduling","children":[{"level":3,"title":"SMP (Symmetric Multi-Processing)","slug":"smp-symmetric-multi-processing","link":"#smp-symmetric-multi-processing","children":[]},{"level":3,"title":"MMS (mutilthread multi-core system)","slug":"mms-mutilthread-multi-core-system","link":"#mms-mutilthread-multi-core-system","children":[]},{"level":3,"title":"LB (Load Balancing) 负载均衡","slug":"lb-load-balancing-负载均衡","link":"#lb-load-balancing-负载均衡","children":[]},{"level":3,"title":"亲和性 (affinity)","slug":"亲和性-affinity","link":"#亲和性-affinity","children":[]}]},{"level":2,"title":"Real-Time Scheduling","slug":"real-time-scheduling","link":"#real-time-scheduling","children":[]}],"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"posts/专业课/OS/cpu调度.md","excerpt":"\\n<h2>原则</h2>\\n<h2>调度算法</h2>\\n<h3>先来先服务（FCFS）</h3>\\n<h3>最短作业优先（SJF）</h3>\\n<h3>最短剩余时间优先（SRTF）</h3>\\n<h3>轮转 (RR: Round Robin)</h3>\\n<p>轮转时间间隔控制在合适范围，太小导致切换效率低，太高导致接近于FCFS。</p>\\n<blockquote>\\n<p>turnaround time (轮转时间) = burst time （执行时间） + waiting time （等待时间）</p>\\n</blockquote>\\n<h2>优先级调度（Priority Scheduling）</h2>","autoDesc":true}');export{h as comp,u as data};
