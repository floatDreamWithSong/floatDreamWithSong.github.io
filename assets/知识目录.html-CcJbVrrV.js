import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as a,o as e}from"./app-B--kDasu.js";const t={};function i(r,s){return e(),l("div",null,s[0]||(s[0]=[a('<h1 id="os-知识目录" tabindex="-1"><a class="header-anchor" href="#os-知识目录"><span>OS 知识目录</span></a></h1><h2 id="_1-操作系统概述" tabindex="-1"><a class="header-anchor" href="#_1-操作系统概述"><span>1. 操作系统概述</span></a></h2><h3 id="四大件" tabindex="-1"><a class="header-anchor" href="#四大件"><span>四大件</span></a></h3><h3 id="从用户-系统视角怎么看待操作系统" tabindex="-1"><a class="header-anchor" href="#从用户-系统视角怎么看待操作系统"><span>从用户/系统视角怎么看待操作系统</span></a></h3><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><h3 id="启动、中断" tabindex="-1"><a class="header-anchor" href="#启动、中断"><span>启动、中断</span></a></h3><h3 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h3><ul><li><strong>ROM</strong>：只读存储器，断电后数据不丢失</li><li><strong>RAM</strong>：随机存储器，断电后数据丢失</li><li><strong>EEPROM</strong>：电可擦可编程只读存储器，断电后数据不丢失</li><li><strong>DRAM</strong>：动态随机存储器，断电后数据丢失</li><li><strong>NVRAM</strong>：非易失性随机存储器，有电池，断电后数据不丢失</li><li><strong>SSD</strong>：固态硬盘，断电后数据不丢失</li><li><strong>HDD</strong>：机械硬盘，断电后数据不丢失</li><li><strong>Flash</strong>：闪存，断电后数据不丢失</li><li><strong>冯-诺伊曼工作原理</strong>：计算机由运算器、控制器、存储器、输入输出设备组成，其中运算器和控制器合称为中央处理单元（CPU），存储器分为内存储器和外存储器，输入输出设备分为输入设备和输出设备。计算机的工作原理是先从外存储器中读取数据到内存储器，然后由运算器进行计算，最后将结果输出到外存储器。</li></ul><h3 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o"><span>I/O</span></a></h3><ul><li><p><strong>设备驱动器</strong>：设备驱动程序是操作系统的一部分，用于控制和管理计算机硬件设备。它为操作系统提供了一种标准的方法来与硬件设备进行通信，使得操作系统可以方便地使用硬件设备。设备驱动程序通常由硬件制造商提供，并且需要安装到操作系统中才能使用。设备驱动程序可以处理硬件设备的各种操作，包括读取数据、写入数据、控制设备的运行等。</p></li><li><p><strong>DMA</strong>：直接存储器访问（Direct Memory Access，DMA）</p></li></ul><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h3><ul><li><p><strong>单处理器</strong>：单处理器系统是指只有一个中央处理单元（CPU）的系统。这种系统只有一个CPU，所有的任务和进程都在一个CPU上运行。单处理器系统通常用于小型计算机和嵌入式系统。</p></li><li><p><strong>多处理器</strong>：多处理器系统是指有多个中央处理单元（CPU）的系统。这种系统有多个CPU，可以同时运行多个任务和进程。多处理器系统通常用于高性能计算和服务器系统。</p><ul><li><strong>对称多处理</strong>：对称多处理（Symmetric Multiprocessing，SMP）是一种多处理器系统，其中所有的处理器都是相同的，并且它们共享相同的内存和I/O设备。对称多处理系统通常用于高性能计算和服务器系统。</li><li><strong>非对称多处理</strong>：非对称多处理（Asymmetric Multiprocessing，AMP）是一种多处理器系统，其中不同的处理器有不同的功能和性能。非对称多处理系统通常用于嵌入式系统和高性能计算系统。</li><li><strong>NUMA</strong></li><li><strong>UMA</strong></li><li><strong>对比单处理器三个优点</strong>：吞吐、规模经济、可靠</li><li><strong>适度退化</strong>：适度退化（Moderate Degradation）是指当多处理器系统中的一个处理器出现故障时，其他处理器可以继续工作，从而保证系统的正常运行。适度退化是多处理器系统的一个重要特性，它可以提高系统的可靠性和可用性。</li><li><strong>容错</strong>：容错（Fault Tolerant）是指当多处理器系统中的一个处理器出现故障时，其他处理器可以接管故障处理器的任务，从而保证系统的正常运行。容错是多处理器系统的一个重要特性，它可以提高系统的可靠性和可用性。</li></ul></li><li><p><strong>多核</strong>：多核处理器是指在一个处理器中包含多个中央处理单元（CPU）。每个CPU都可以独立地执行任务和进程。多核处理器可以提高计算机的性能和效率，因为它可以同时处理多个任务和进程。</p></li><li><p><strong>集群</strong>：集群是一种由多个计算机组成的系统，它们通过网络连接在一起，可以协同工作。集群中的计算机可以共享资源，如内存、磁盘和打印机等。集群通常用于高性能计算和服务器系统。</p><ul><li><strong>对称集群</strong>：对称集群（Symmetric Cluster）是一种集群，其中所有的计算机都是相同的，并且它们共享相同的资源。对称集群通常用于高性能计算和服务器系统。</li><li><strong>非对称集群</strong>：非对称集群（Asymmetric Cluster）是一种集群，其中不同的计算机有不同的功能和性能。非对称集群通常用于嵌入式系统和高性能计算系统。</li><li><strong>负载均衡</strong>：负载均衡（Load Balancing）是指将任务和进程分配给集群中的计算机，以平衡它们的负载。负载均衡可以提高集群的性能和效率，因为它可以避免某些计算机过载，而其他计算机则可以保持空闲状态。</li><li><strong>并行计算</strong>：并行计算（Parallel Computing）是指同时使用多个处理器来执行任务和进程。并行计算可以提高计算机的性能和效率，因为它可以同时处理多个任务和进程。</li></ul></li></ul><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><ul><li><strong>多道程序</strong><ul><li><strong>作业池</strong></li><li><strong>分时系统</strong></li><li><strong>调度</strong></li><li><strong>交换，虚拟内存</strong></li></ul></li><li><strong>执行</strong><ul><li><strong>中断驱动</strong></li><li><strong>trap</strong> ：陷阱，是一种特殊的系统调用，用于请求操作系统提供某种服务。陷阱是一种特殊的系统调用，用于请求操作系统提供某种服务。陷阱是一种特殊的系统调用，用于请求操作系统提供某种服务。</li><li><strong>exception</strong> ：异常，是一种特殊的系统调用，用于请求操作系统提供某种服务。异常是一种特殊的系统调用，用于请求操作系统提供某种服务。异常是一种特殊的系统调用，用于请求操作系统提供某种服务。</li></ul></li><li><strong>模式</strong><ul><li><strong>用户模式</strong></li><li><strong>内核模式</strong></li><li><strong>模式位</strong></li><li><strong>特权指令</strong></li></ul></li><li><strong>定时器</strong></li><li><strong>...</strong></li></ul><h2 id="_2-操作系统结构" tabindex="-1"><a class="header-anchor" href="#_2-操作系统结构"><span>2. 操作系统结构</span></a></h2><h3 id="提供的服务" tabindex="-1"><a class="header-anchor" href="#提供的服务"><span>提供的服务</span></a></h3><ul><li><strong>用户界面</strong><ul><li><strong>CLI</strong></li><li><strong>GUI</strong></li><li><strong>批处理界面</strong></li></ul></li><li><strong>文件管理</strong></li><li><strong>资源分配</strong></li><li><strong>I/O</strong></li><li><strong>安全与保护</strong></li><li><strong>执行程序</strong></li><li><strong>通信</strong></li><li><strong>错误检测</strong></li><li><strong>记账</strong></li></ul><h3 id="系统调用" tabindex="-1"><a class="header-anchor" href="#系统调用"><span>系统调用</span></a></h3><ul><li><strong>六种类型</strong><ul><li><strong>进程控制</strong></li><li><strong>文件管理</strong><ul><li><strong>创建</strong></li><li><strong>删除</strong></li><li><strong>读</strong></li><li><strong>写</strong></li><li><strong>重定位</strong></li><li><strong>关闭</strong></li><li><strong>获取信息</strong></li><li><strong>设置信息</strong></li><li><strong>移动</strong></li><li><strong>复制</strong></li></ul></li><li><strong>设备管理</strong></li><li><strong>信息维护</strong><ul><li><strong>时间</strong></li><li><strong>日期</strong></li><li><strong>转储</strong></li></ul></li><li><strong>通信</strong></li><li><strong>保护</strong></li></ul></li></ul><h3 id="系统程序" tabindex="-1"><a class="header-anchor" href="#系统程序"><span>系统程序</span></a></h3><ul><li><strong>文件管理</strong></li><li><strong>状态信息</strong></li><li><strong>程序语言支持</strong></li><li><strong>程序加载和执行</strong></li><li><strong>通信</strong></li><li><strong>后台服务</strong></li></ul><h3 id="用户程序" tabindex="-1"><a class="header-anchor" href="#用户程序"><span>用户程序</span></a></h3><h3 id="设计与实现" tabindex="-1"><a class="header-anchor" href="#设计与实现"><span>设计与实现</span></a></h3><h4 id="用户目标和系统目标" tabindex="-1"><a class="header-anchor" href="#用户目标和系统目标"><span>用户目标和系统目标</span></a></h4><h4 id="机制与策略" tabindex="-1"><a class="header-anchor" href="#机制与策略"><span>机制与策略</span></a></h4><blockquote><p>机制决定如何做，策略决定做什么。比如实现多道程序的机制是作业调度，但是用的调度算法才是机制。</p></blockquote><blockquote><p>策略与机制的分离，策略随着时间地点而容易改变。</p></blockquote><h3 id="操作系统架构" tabindex="-1"><a class="header-anchor" href="#操作系统架构"><span>操作系统架构</span></a></h3><blockquote><p>阐述下面架构的优缺点、机制</p></blockquote><ul><li><strong>简单结构</strong></li><li><strong>分层结构</strong></li><li><strong>微内核结构</strong></li><li><strong>模块化结构</strong></li><li><strong>混合结构</strong></li></ul><h3 id="系统引导" tabindex="-1"><a class="header-anchor" href="#系统引导"><span>系统引导</span></a></h3><blockquote><p><strong>引导程序/引导加载程序</strong>：可定位内核，并将其加载到内存开始执行，该程序在ROM或EPROM <strong>固件的问题</strong>：ROM运行比RAM慢，并且价格贵。一般的系统，将操作系统放在磁盘，引导程序在固件 阐述加载过程</p></blockquote><h2 id="_3-进程" tabindex="-1"><a class="header-anchor" href="#_3-进程"><span>3. 进程</span></a></h2><h3 id="怎么理解程序和进程" tabindex="-1"><a class="header-anchor" href="#怎么理解程序和进程"><span>怎么理解程序和进程</span></a></h3><h3 id="进程状态图" tabindex="-1"><a class="header-anchor" href="#进程状态图"><span>进程状态图</span></a></h3><h3 id="pcb-process-control-block-组成" tabindex="-1"><a class="header-anchor" href="#pcb-process-control-block-组成"><span>PCB（Process Control Block）组成</span></a></h3><h3 id="进程-线程" tabindex="-1"><a class="header-anchor" href="#进程-线程"><span>进程^线程</span></a></h3><h3 id="进程调度" tabindex="-1"><a class="header-anchor" href="#进程调度"><span>进程调度</span></a></h3><blockquote><p>进程调度器，调度队列、就绪队列、设备队列，队列图。。。</p></blockquote><h3 id="长-中-短期调度程序" tabindex="-1"><a class="header-anchor" href="#长-中-短期调度程序"><span>长/中/短期调度程序</span></a></h3><h3 id="多道程序程度-内存中的进程数量" tabindex="-1"><a class="header-anchor" href="#多道程序程度-内存中的进程数量"><span>多道程序程度：内存中的进程数量</span></a></h3><h3 id="上下文切换流程" tabindex="-1"><a class="header-anchor" href="#上下文切换流程"><span>上下文切换流程</span></a></h3><h3 id="进程的创建" tabindex="-1"><a class="header-anchor" href="#进程的创建"><span>进程的创建</span></a></h3><h3 id="进程的终止" tabindex="-1"><a class="header-anchor" href="#进程的终止"><span>进程的终止</span></a></h3><h4 id="级联终止" tabindex="-1"><a class="header-anchor" href="#级联终止"><span>级联终止</span></a></h4><h4 id="僵尸进程" tabindex="-1"><a class="header-anchor" href="#僵尸进程"><span>僵尸进程</span></a></h4><h4 id="孤儿进程" tabindex="-1"><a class="header-anchor" href="#孤儿进程"><span>孤儿进程</span></a></h4><h3 id="通信" tabindex="-1"><a class="header-anchor" href="#通信"><span>通信</span></a></h3><blockquote><p>阐述他们的优缺点、机制、策略</p></blockquote><h4 id="共享内存、消息传递" tabindex="-1"><a class="header-anchor" href="#共享内存、消息传递"><span>共享内存、消息传递</span></a></h4><h3 id="c-s通信" tabindex="-1"><a class="header-anchor" href="#c-s通信"><span>C/S通信</span></a></h3><h4 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>socket</span></a></h4><h4 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h4><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>pipeline</span></a></h3><h2 id="_4-多线程" tabindex="-1"><a class="header-anchor" href="#_4-多线程"><span>4. 多线程</span></a></h2><h3 id="线程单元信息有哪些" tabindex="-1"><a class="header-anchor" href="#线程单元信息有哪些"><span>线程单元信息有哪些</span></a></h3><h3 id="同一进程的线程共享哪些资源" tabindex="-1"><a class="header-anchor" href="#同一进程的线程共享哪些资源"><span>同一进程的线程共享哪些资源</span></a></h3><h3 id="使用多线程的优点" tabindex="-1"><a class="header-anchor" href="#使用多线程的优点"><span>使用多线程的优点</span></a></h3><h3 id="并行和并发" tabindex="-1"><a class="header-anchor" href="#并行和并发"><span>并行和并发</span></a></h3><h3 id="amdahl定律" tabindex="-1"><a class="header-anchor" href="#amdahl定律"><span>Amdahl定律</span></a></h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>加速比</mtext><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><mi>n</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex"> 加速比 = \\frac{1}{(p)+\\frac{1-p}{n}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">加速比</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4537em;vertical-align:-1.1322em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.2128em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8972em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1322em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="多线程模型" tabindex="-1"><a class="header-anchor" href="#多线程模型"><span>多线程模型</span></a></h3><blockquote><p>用户线程和内核线程</p></blockquote><h4 id="多对一" tabindex="-1"><a class="header-anchor" href="#多对一"><span>多对一</span></a></h4><h4 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>一对一</span></a></h4><h4 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多"><span>多对多</span></a></h4>',66)]))}const p=n(t,[["render",i],["__file","知识目录.html.vue"]]),c=JSON.parse('{"path":"/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/OS/%E7%9F%A5%E8%AF%86%E7%9B%AE%E5%BD%95.html","title":"OS 知识目录","lang":"zh-CN","frontmatter":{"description":"OS 知识目录 1. 操作系统概述 四大件 从用户/系统视角怎么看待操作系统 定义 启动、中断 存储 ROM：只读存储器，断电后数据不丢失 RAM：随机存储器，断电后数据丢失 EEPROM：电可擦可编程只读存储器，断电后数据不丢失 DRAM：动态随机存储器，断电后数据丢失 NVRAM：非易失性随机存储器，有电池，断电后数据不丢失 SSD：固态硬盘，断电...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E4%B8%93%E4%B8%9A%E8%AF%BE/OS/%E7%9F%A5%E8%AF%86%E7%9B%AE%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"DayDreamer的个人博客"}],["meta",{"property":"og:title","content":"OS 知识目录"}],["meta",{"property":"og:description","content":"OS 知识目录 1. 操作系统概述 四大件 从用户/系统视角怎么看待操作系统 定义 启动、中断 存储 ROM：只读存储器，断电后数据不丢失 RAM：随机存储器，断电后数据丢失 EEPROM：电可擦可编程只读存储器，断电后数据不丢失 DRAM：动态随机存储器，断电后数据丢失 NVRAM：非易失性随机存储器，有电池，断电后数据不丢失 SSD：固态硬盘，断电..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OS 知识目录\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DayDreamer\\",\\"url\\":\\"https://floatDreamWithSong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 操作系统概述","slug":"_1-操作系统概述","link":"#_1-操作系统概述","children":[{"level":3,"title":"四大件","slug":"四大件","link":"#四大件","children":[]},{"level":3,"title":"从用户/系统视角怎么看待操作系统","slug":"从用户-系统视角怎么看待操作系统","link":"#从用户-系统视角怎么看待操作系统","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"启动、中断","slug":"启动、中断","link":"#启动、中断","children":[]},{"level":3,"title":"存储","slug":"存储","link":"#存储","children":[]},{"level":3,"title":"I/O","slug":"i-o","link":"#i-o","children":[]},{"level":3,"title":"架构","slug":"架构","link":"#架构","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]}]},{"level":2,"title":"2. 操作系统结构","slug":"_2-操作系统结构","link":"#_2-操作系统结构","children":[{"level":3,"title":"提供的服务","slug":"提供的服务","link":"#提供的服务","children":[]},{"level":3,"title":"系统调用","slug":"系统调用","link":"#系统调用","children":[]},{"level":3,"title":"系统程序","slug":"系统程序","link":"#系统程序","children":[]},{"level":3,"title":"用户程序","slug":"用户程序","link":"#用户程序","children":[]},{"level":3,"title":"设计与实现","slug":"设计与实现","link":"#设计与实现","children":[]},{"level":3,"title":"操作系统架构","slug":"操作系统架构","link":"#操作系统架构","children":[]},{"level":3,"title":"系统引导","slug":"系统引导","link":"#系统引导","children":[]}]},{"level":2,"title":"3. 进程","slug":"_3-进程","link":"#_3-进程","children":[{"level":3,"title":"怎么理解程序和进程","slug":"怎么理解程序和进程","link":"#怎么理解程序和进程","children":[]},{"level":3,"title":"进程状态图","slug":"进程状态图","link":"#进程状态图","children":[]},{"level":3,"title":"PCB（Process Control Block）组成","slug":"pcb-process-control-block-组成","link":"#pcb-process-control-block-组成","children":[]},{"level":3,"title":"进程^线程","slug":"进程-线程","link":"#进程-线程","children":[]},{"level":3,"title":"进程调度","slug":"进程调度","link":"#进程调度","children":[]},{"level":3,"title":"长/中/短期调度程序","slug":"长-中-短期调度程序","link":"#长-中-短期调度程序","children":[]},{"level":3,"title":"多道程序程度：内存中的进程数量","slug":"多道程序程度-内存中的进程数量","link":"#多道程序程度-内存中的进程数量","children":[]},{"level":3,"title":"上下文切换流程","slug":"上下文切换流程","link":"#上下文切换流程","children":[]},{"level":3,"title":"进程的创建","slug":"进程的创建","link":"#进程的创建","children":[]},{"level":3,"title":"进程的终止","slug":"进程的终止","link":"#进程的终止","children":[]},{"level":3,"title":"通信","slug":"通信","link":"#通信","children":[]},{"level":3,"title":"C/S通信","slug":"c-s通信","link":"#c-s通信","children":[]},{"level":3,"title":"pipeline","slug":"pipeline","link":"#pipeline","children":[]}]},{"level":2,"title":"4. 多线程","slug":"_4-多线程","link":"#_4-多线程","children":[{"level":3,"title":"线程单元信息有哪些","slug":"线程单元信息有哪些","link":"#线程单元信息有哪些","children":[]},{"level":3,"title":"同一进程的线程共享哪些资源","slug":"同一进程的线程共享哪些资源","link":"#同一进程的线程共享哪些资源","children":[]},{"level":3,"title":"使用多线程的优点","slug":"使用多线程的优点","link":"#使用多线程的优点","children":[]},{"level":3,"title":"并行和并发","slug":"并行和并发","link":"#并行和并发","children":[]},{"level":3,"title":"Amdahl定律","slug":"amdahl定律","link":"#amdahl定律","children":[]},{"level":3,"title":"多线程模型","slug":"多线程模型","link":"#多线程模型","children":[]}]}],"readingTime":{"minutes":6.94,"words":2082},"filePathRelative":"posts/专业课/OS/知识目录.md","excerpt":"\\n<h2>1. 操作系统概述</h2>\\n<h3>四大件</h3>\\n<h3>从用户/系统视角怎么看待操作系统</h3>\\n<h3>定义</h3>\\n<h3>启动、中断</h3>\\n<h3>存储</h3>\\n<ul>\\n<li><strong>ROM</strong>：只读存储器，断电后数据不丢失</li>\\n<li><strong>RAM</strong>：随机存储器，断电后数据丢失</li>\\n<li><strong>EEPROM</strong>：电可擦可编程只读存储器，断电后数据不丢失</li>\\n<li><strong>DRAM</strong>：动态随机存储器，断电后数据丢失</li>\\n<li><strong>NVRAM</strong>：非易失性随机存储器，有电池，断电后数据不丢失</li>\\n<li><strong>SSD</strong>：固态硬盘，断电后数据不丢失</li>\\n<li><strong>HDD</strong>：机械硬盘，断电后数据不丢失</li>\\n<li><strong>Flash</strong>：闪存，断电后数据不丢失</li>\\n<li><strong>冯-诺伊曼工作原理</strong>：计算机由运算器、控制器、存储器、输入输出设备组成，其中运算器和控制器合称为中央处理单元（CPU），存储器分为内存储器和外存储器，输入输出设备分为输入设备和输出设备。计算机的工作原理是先从外存储器中读取数据到内存储器，然后由运算器进行计算，最后将结果输出到外存储器。</li>\\n</ul>","autoDesc":true}');export{p as comp,c as data};
